{
  parserClass="org.thymeleaf.extras.idea.lang.expression.parser.ThymeleafExpressionParser"
  parserUtilClass="org.thymeleaf.extras.idea.lang.expression.parser.ThymeleafExpressionParserUtil"

  psiPackage="org.thymeleaf.extras.idea.lang.expression.psi"
  psiImplPackage="org.thymeleaf.extras.idea.lang.expression.psi.impl"
  psiImplUtilClass="org.thymeleaf.extras.idea.lang.expression.psi.impl.ThymeleafExpressionPsiImplUtil"

  elementTypeHolderClass="org.thymeleaf.extras.idea.lang.expression.parser.ThymeleafExpressionElementTypes"
  elementTypeClass="org.thymeleaf.extras.idea.lang.expression.parser.ThymeleafExpressionCompositeElementType"
  tokenTypeClass="org.thymeleaf.extras.idea.lang.expression.parser.ThymeleafExpressionElementType"

  tokens=[
    VARIABLE_EXPR_START='${'
    SELECTION_EXPR_START='*{'
    MESSAGE_EXPR_START='#{'
    LINK_EXPR_START='@{'
    EXPRESSION_END='}'

    OP_CONDITIONAL='?'
    OP_COLON=':'
    OP_DEFAULT='?:'

    OP_MUL='*'
    OP_DIV='/'
    OP_REMAINDER='%'
    OP_PLUS='+'
    OP_MINUS='-'

    CONVERTED_VARIABLE_EXPR_START='${{'
    CONVERTED_SELECTION_EXPR_START='*{{'
    CONVERTED_EXPRESSION_END='}}'

    // comment='regexp:--.*'
    // The actual definition of token is a bit more complicated
    token='regexp:(.+)'
    string='regexp:([^\{\}\n]+)'
  ]

  name(".*expr")='expression'
  name(".*expression")='expression'

  // Note: When there are multiple extends("...") patterns applicable for the same rule,
  //       the first extends(...)-clause that matches takes precedence.
  //       Therefore, match-all patterns like ".*expr" have to come last.

  extends("(variable|selection|message|link)_expr")='generic_selection_expr'
  extends("(and|or|eq|neq||gt|gt_eq|lt|lt_eq|mul|div|rem|plus|minus)_expr")='fake_binary_expression'
  extends(".*(expr|expression)")=expression

  methods("(variable|selection|message|link)_expr")=[
    getSelectionString="/string[0]"
  ]

  // Enable PsiReferenceContributor on all generic_selection_expr subtypes
  implements("generic_selection_expr")="com.intellij.psi.ContributedReferenceHost"
  methods("generic_selection_expr")=[getReferences]
}

root ::= expression

//
// the root expression rule
//
// TODO Check if comparison operators are parsed correctly w.r.t. precedence
expression ::= conditional_expr | default_expr
    | or_expr | and_expr
    | equality_group | comparator_group
    | add_group
    | mul_group
    | unary_minus_expr
    | negation_expr
    | primary_group

///
// private rules to define operators with the same priority
//
private equality_group ::= eq_expr | neq_expr
private comparator_group ::= gt_expr | gt_eq_expr | lt_expr | lt_eq_expr
private mul_group ::= mul_expr | div_expr | remainder_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= token_expr | generic_selection_expr

//
// public rules for each expression
//
conditional_expr ::= expression '?' expression [':' expression] {
    methods=[
        condition="expression[0]"
        then="expression[1]"
        else="expression[0]"
    ]
}

default_expr ::= expression '?:' expression {
    methods=[
        queried="expression[0]"
        default="expression[1]"
    ]
}

// AND OR
and_expr ::= expression 'and' expression
or_expr ::= expression 'or' expression

// == !=
eq_expr ::= expression '==' expression
neq_expr ::= expression '!=' expression

// < > <= >=
gt_expr ::= expression '>' expression
lt_expr ::= expression '<' expression
gt_eq_expr ::= expression '>=' expression
lt_eq_expr ::= expression '<=' expression

// * / %
mul_expr ::= expression '*' expression
div_expr ::= expression '/' expression
remainder_expr ::= expression '%' expression

// + -
plus_expr ::= expression '+' expression
minus_expr ::= expression '-' expression

// -
unary_minus_expr ::= '-' expression
negation_expr ::= ('!' | 'not') expression

fake fake_binary_expression ::= expression+ {
    methods=[
        left="expression[0]"
        right="expression[1]"
    ]
}

// Selectors: ${...}, *{...}, #{...} and @{...}
generic_selection_expr ::= variable_expr | selection_expr | link_expr | message_expr

variable_expr ::= converted_variable_expr | standard_variable_expr
selection_expr ::= converted_selection_expr | standard_selection_expr
message_expr ::= '#{' standard_expr_content '}' {pin=1}
link_expr ::= '@{' standard_expr_content '}' {pin=1}

private converted_variable_expr ::= '${{' converted_expr_content '}}' {pin=1}
private converted_selection_expr ::= '*{{' converted_expr_content '}}' {pin=1 recoverWhile=converted_expr_recover}
private converted_expr_content ::= string {recoverWhile=converted_expr_recover}
private converted_expr_recover ::= !('}}')

private standard_variable_expr ::= '${' standard_expr_content '}' {pin=1}
private standard_selection_expr ::= '*{' standard_expr_content '}' {pin=1}
private standard_expr_content ::= string {recoverWhile=standard_expr_recover}
private standard_expr_recover ::= !('}')

// Text tokens: something
token_expr ::= token

// Text literals: 'something'
// text_literal_expr ::= string "'" {pin=1}